{"version":3,"sources":["ShittyEvent.tsx","Player.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ShittyEvent","prompt","click","display","this","onClick","displayResponse","DEFAULT_SLEEP","Player","friends","gpa","pool","queue","sleep","week","length","shift","Math","floor","random","App","props","SAUDER_FRIENDS","SAUDER_GPA","SCIENCE_FRIENDS","SCIENCE_GPA","ARTS_FRIENDS","ARTS_GPA","ENG_FRIENDS","ENG_GPA","chooseArts","setState","player","getNextEvent","chooseScience","chooseEng","chooseSauder","e","state","getRandomEvent","event","promptMsg","choiceElement","displayChoices","chooseFaculty","undefined","className","id","React","Component","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0482989.chunk.js","sourcesContent":["import React from \"react\";\n\nimport IEvent from \"./IEvent\";\n\nexport default class ShittyEvent implements IEvent {\n    private readonly prompt: string;\n    private readonly click: string;\n    private readonly display: string;\n\n    constructor(prompt: string, click: string, display: string) {\n        this.prompt = prompt;\n        this.click = click;\n        this.display = display;\n    }\n\n    displayPrompt(): string {\n        return this.prompt;\n    }\n\n    displayChoices(): JSX.Element {\n      return <button onClick={this.displayResponse}>{this.click}</button>;\n    }\n\n    displayResponse(): string {\n        return this.display;\n    }\n\n}\n","import IEvent from \"./IEvent\";\nimport ShittyEvent from \"./ShittyEvent\";\n\nconst DEFAULT_SLEEP = 100;\n\nexport default class Player {\n    public pool: IEvent[];\n    public queue: IEvent[];\n    public friends: number;\n    public gpa: number;\n    public sleep: number;\n    public week: number;\n\n    constructor(friends: number, gpa: number) {\n        this.pool = [];\n        this.queue = [\n            new ShittyEvent(\n              \"This is a shitty event\", \n              \"click here to conitnue\", \n              \"I'm really phoning it in on these examples\"\n            ),\n            new ShittyEvent(\n              \"This is shitty envent number 2\", \n              \"click her to break everything\", \n              \"yeaaaa boiiii\"\n            ),\n        ];\n        this.friends = friends;\n        this.gpa = gpa;\n        this.sleep = DEFAULT_SLEEP;\n        this.week = 0;\n    }\n\n    public getRandomEvent(): IEvent | undefined {\n      return this.queue.length > 0 \n        ? this.queue.shift() \n        :  this.pool[Math.floor(Math.random() * this.pool.length)];\n    }\n}\n","import React from \"react\";\n\nimport IEvent from \"./IEvent\";\nimport Player from \"./Player\";\n\n// // tslint:disable-next-line:no-empty-interface\nexport interface IProps {}\n\nexport interface IState {\n  player: Player | undefined;\n  event: IEvent | undefined;\n  promptMsg: string;\n  choiceElement: JSX.Element;\n}\n\nexport default class App extends React.Component <IProps, IState> {\n\n  public SAUDER_FRIENDS: number = 100;\n  public SAUDER_GPA: number = 2.0;\n  public SCIENCE_FRIENDS: number = 50;\n  public SCIENCE_GPA: number = 3.0;\n  public ARTS_FRIENDS: number = 50;\n  public ARTS_GPA: number = 2.0;\n  public ENG_FRIENDS: number = 0;\n  public ENG_GPA: number = 4.0;\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = { \n      player: undefined,\n      event: undefined,\n      promptMsg: \"Welcome to UBC Sim!\",\n      choiceElement: <button onClick={this.chooseFaculty}>Start!</button>\n    };\n  }\n\n  chooseArts = () => {\n    this.setState({\n      player: new Player(this.ARTS_FRIENDS, this.ARTS_GPA),\n    });\n    this.getNextEvent();\n  }\n\n  chooseScience = () => {\n    this.setState({\n      player: new Player(this.SCIENCE_FRIENDS, this.SCIENCE_GPA),\n    });\n    this.getNextEvent();\n  }\n\n  chooseEng = () => {\n    this.setState({\n      player: new Player(this.ENG_FRIENDS, this.ENG_GPA),\n    });\n    this.getNextEvent();\n  }\n\n  chooseSauder = () => {\n    this.setState({\n      player: new Player(this.SAUDER_FRIENDS, this.SAUDER_GPA),\n    });\n    this.getNextEvent();\n  }\n \n  getNextEvent = () => {\n    let e = this.state.player!.getRandomEvent();\n    this.setState({ \n      event: e,\n      promptMsg: this.state.event!.displayResponse(),\n      choiceElement: this.state.event!.displayChoices()\n    });\n  }\n\n  displayResponse = () => {\n    this.setState({\n      promptMsg: this.state.event!.displayResponse(),\n      choiceElement: <button onClick={this.getNextEvent}>continue</button>\n    });\n  }\n\n  chooseFaculty = () => {\n    this.setState({\n      promptMsg: \"Choose your faculty!\",\n      choiceElement: (\n        <div>\n          <button onClick={this.chooseArts}>Arts</button>\n          <button onClick={this.chooseEng}>Engineering</button>\n          <button onClick={this.chooseScience}>Science</button>\n          <button onClick={this.chooseSauder}>Sauder</button>\n        </div>\n      )\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2 id=\"prompt\">{this.state.promptMsg}</h2>\n        <div id=\"choices\">{this.state.choiceElement}</div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\n// import './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nrender(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}