{"version":3,"sources":["events/core.ts","events/PickFacultyEvent.ts","events/BoomerGregorEvent.ts","trackers/PlayerStats.ts","trackers/EventTracker.ts","components/ChoiceButton.tsx","components/Choices.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StatChanges","fds","gpa","sleep","dfriends","dgpa","dsleep","this","PickFacultyEvent","Arts","Engineering","Science","Sauder","BoomerGregorEvent","TrustNaturalRecursion","OkBoomer","PlayerStats","friends","statChanges","NoMoreEventsEvent","EventTracker","eventPool","eventQueue","pool","queue","length","shift","event","Math","floor","random","index","indexOf","splice","unshift","ChoiceButton","props","className","onClick","makeChoice","choice","answer","Choices","choiceButtons","choices","map","key","App","state","playerStats","applyStatChanges","followUps","followUp","eventTracker","queueFollowUpEvent","nextEvent","getNextEvent","setState","prevState","week","currentEvent","firstEvent","id","prompt","React","Component","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.413f2e35.chunk.js","sourcesContent":["export interface IEvent {\n    prompt(): string;\n    imgPath(): string;\n    choices(): IChoice[];\n}\n\nexport interface IChoice {\n    answer(): string;\n    followUps(): IEvent[];\n    statChanges(): StatChanges;\n}\n\nexport class StatChanges {\n    public readonly dfriends: number;\n    public readonly dgpa: number;\n    public readonly dsleep: number;\n\n    constructor(fds: number, gpa: number, sleep: number) {\n        this.dfriends = fds;\n        this.dgpa = gpa;\n        this.dsleep = sleep;\n    }\n}\n","import {IEvent, IChoice, StatChanges} from \"./core\";\n\nexport default class PickFacultyEvent implements IEvent {\n    prompt(): string {\n        return \"Choose your faculty!\";\n    }\n\n    imgPath(): string {\n        return \"\";\n    }\n\n    choices(): IChoice[] {\n        return [\n            new Arts(),\n            new Engineering(),\n            new Science(),\n            new Sauder()\n        ];\n    }\n}\n\nclass Arts implements IChoice {\n    answer(): string {\n        return \"Arts\";\n    }\n\n    followUps(): IEvent[] {\n        return [];\n    }\n\n    statChanges(): StatChanges {\n        return new StatChanges(50, 2.0, 100);\n    }\n}\n\nclass Engineering implements IChoice {\n    answer(): string {\n        return \"Engineering\";\n    }\n\n    followUps(): IEvent[] {\n        return [];\n    }\n\n    statChanges(): StatChanges {\n        return new StatChanges(0, 4.0, 100);\n    }\n}\n\nclass Science implements IChoice {\n    answer(): string {\n        return \"Science\";\n    }\n\n    followUps(): IEvent[] {\n        return [];\n    }\n\n    statChanges(): StatChanges {\n        return new StatChanges(50, 3.0, 100);\n    }\n}\n\nclass Sauder implements IChoice {\n    answer(): string {\n        return \"Sauder\";\n    }\n\n    followUps(): IEvent[] {\n        return [];\n    }\n\n    statChanges(): StatChanges {\n        return new StatChanges(100, 2.0, 100);\n    }\n}\n","import {IEvent, IChoice, StatChanges} from \"./core\";\r\n\r\nexport default class BoomerGregorEvent implements IEvent {\r\n    prompt(): string {\r\n        return \"Gregor tells the class to start studying for 110 early!\";\r\n    }\r\n\r\n    imgPath(): string {\r\n        return \"\";\r\n    }\r\n\r\n    choices(): IChoice[] {\r\n        return [\r\n            new TrustNaturalRecursion(),\r\n            new OkBoomer()\r\n        ];\r\n    }\r\n}\r\n\r\nclass TrustNaturalRecursion implements IChoice {\r\n    answer(): string {\r\n        return \"Trust the natural recursion\";\r\n    }\r\n\r\n    followUps(): IEvent[] {\r\n        return [];\r\n    }\r\n\r\n    statChanges(): StatChanges {\r\n        return new StatChanges(10, 0.5, -15);\r\n    }\r\n}\r\n\r\nclass OkBoomer implements IChoice {\r\n    answer(): string {\r\n        return \"Ok boomer\";\r\n    }\r\n\r\n    followUps(): IEvent[] {\r\n        return [];\r\n    }\r\n\r\n    statChanges(): StatChanges {\r\n        return new StatChanges(60, -0.02, -8);\r\n    }\r\n}","import {StatChanges} from \"./../events/core\";\n\nexport default class PlayerStats {\n    private friends: number;\n    private gpa: number;\n    private sleep: number;\n\n    constructor() {\n        this.friends = 0;\n        this.gpa = 0;\n        this.sleep = 0;\n    }\n\n    public applyStatChanges(statChanges: StatChanges) {\n        this.friends += statChanges.dfriends;\n        this.gpa += statChanges.dgpa;\n        this.sleep += statChanges.dsleep;\n    }\n\n    public getFriends(): number {\n        return this.friends;\n    }\n\n    public getGpa(): number {\n        return this.gpa;\n    }\n\n    public getSleep(): number {\n        return this.sleep;\n    }\n}\n","import {IEvent, IChoice} from \"./../events/core\";\r\n\r\nclass NoMoreEventsEvent implements IEvent {\r\n    prompt(): string {\r\n        return \"Oops! No more events!\";\r\n    }\r\n\r\n    imgPath(): string {\r\n        return \"\";\r\n    }\r\n\r\n    choices(): IChoice[] {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default class EventTracker {\r\n    private pool: IEvent[];\r\n    private queue: IEvent[];\r\n\r\n    constructor(eventPool: IEvent[], eventQueue: IEvent[]) {\r\n        this.pool = eventPool;\r\n        this.queue = eventQueue;\r\n    }\r\n\r\n    public getNextEvent(): IEvent {\r\n        // The queue being non-empty indicates there is a follow up\r\n        // event to go through, otherwise pick a random event\r\n        if (this.queue.length > 0)\r\n            return this.queue.shift() as IEvent;\r\n        else if (this.pool.length > 0){\r\n            let event = this.pool[Math.floor(Math.random() * this.pool.length)];\r\n            const index = this.pool.indexOf(event);\r\n            this.pool.splice(index, 1);\r\n            return event;\r\n        }\r\n        else\r\n            return new NoMoreEventsEvent();\r\n    }\r\n\r\n    public queueFollowUpEvent(event: IEvent) {\r\n        this.queue.unshift(event);\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport {IChoice} from \"./../events/core\";\r\n\r\ninterface IProps {\r\n    choice: IChoice;\r\n    makeChoice(choice: IChoice): void;\r\n}\r\n\r\nexport default function ChoiceButton(props: IProps) {\r\n    return (\r\n        <button\r\n            className=\"ChoiceButton\"\r\n            onClick={() => props.makeChoice(props.choice)}\r\n        >\r\n            {props.choice.answer()}\r\n        </button>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nimport ChoiceButton from \"./ChoiceButton\";\r\nimport {IChoice} from \"./../events/core\";\r\n\r\ninterface IProps {\r\n    choices: IChoice[];\r\n    makeChoice(choice: IChoice): void;\r\n}\r\n\r\nexport default function Choices(props: IProps) {\r\n    const choiceButtons = props.choices.map(choice =>\r\n        (\r\n            <ChoiceButton\r\n                key={choice.answer()}\r\n                choice={choice}\r\n                makeChoice={props.makeChoice}\r\n            />\r\n        )\r\n    );\r\n\r\n    return (\r\n        <div className=\"Choices\">\r\n            {choiceButtons}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\n\nimport {IEvent, IChoice} from \"./events/core\";\nimport PickFacultyEvent from \"./events/PickFacultyEvent\";\nimport BoomerGregorEvent from \"./events/BoomerGregorEvent\";\n\nimport PlayerStats from \"./trackers/PlayerStats\";\nimport EventTracker from \"./trackers/EventTracker\";\n\nimport Choices from \"./components/Choices\";\n\n// // tslint:disable-next-line:no-empty-interface\nexport interface IProps {}\n\nexport interface IState {\n    week: number;\n    playerStats: PlayerStats;\n    currentEvent: IEvent;\n    eventTracker: EventTracker;\n}\n\nexport default class App extends React.Component <IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        const playerStats = new PlayerStats();\n        const eventTracker = new EventTracker(\n            [new BoomerGregorEvent()],\n            [new PickFacultyEvent()]\n        );\n        let firstEvent = eventTracker.getNextEvent();\n\n        this.state = {\n            week: 1,\n            playerStats: playerStats,\n            currentEvent: firstEvent,\n            eventTracker: eventTracker\n        };\n    }\n\n    makeChoice = (choice: IChoice) => {\n        this.state.playerStats.applyStatChanges(choice.statChanges());\n\n        for (let followUp of choice.followUps()) {\n            this.state.eventTracker.queueFollowUpEvent(followUp);\n        }\n\n        let nextEvent = this.state.eventTracker.getNextEvent();\n\n        this.setState(prevState => {\n            return {\n                week: prevState.week + 1,\n                playerStats: prevState.playerStats,\n                currentEvent: nextEvent,\n                eventTracker: prevState.eventTracker\n            };\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h2 id=\"prompt\">{this.state.currentEvent.prompt()}</h2>\n                <Choices\n                    choices={this.state.currentEvent.choices()}\n                    makeChoice={this.makeChoice}\n                />\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\n// import './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nrender(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}