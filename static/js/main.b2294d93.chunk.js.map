{"version":3,"sources":["events/core.ts","events/FacultyPicker.ts","Player.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["StatChanges","fds","gpa","sleep","dfriends","dgpa","dsleep","this","FacultyPicker","Arts","Engineering","Science","Sauder","Player","pool","queue","friends","week","length","shift","Math","floor","random","App","props","SAUDER_FRIENDS","SAUDER_GPA","SCIENCE_FRIENDS","SCIENCE_GPA","ARTS_FRIENDS","ARTS_GPA","ENG_FRIENDS","ENG_GPA","p","state","player","event","getRandomEvent","e","setState","choices","map","c","className","key","answer","id","prompt","React","Component","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAYaA,EAKT,WAAYC,EAAaC,EAAaC,GAAgB,yBAJtCC,cAIqC,OAHrCC,UAGqC,OAFrCC,YAEqC,EACjDC,KAAKH,SAAWH,EAChBM,KAAKF,KAAOH,EACZK,KAAKD,OAASH,GClBDK,E,iGAEb,MAAO,yB,gCAIP,MAAO,K,gCAIP,MAAO,CACH,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,O,KAMVH,E,iGAEE,MAAO,S,kCAIP,MAAO,K,oCAIP,OAAO,IAAIT,EAAY,GAAI,EAAK,S,KAIlCU,E,iGAEE,MAAO,gB,kCAIP,MAAO,K,oCAIP,OAAO,IAAIV,EAAY,EAAG,EAAK,S,KAIjCW,E,iGAEE,MAAO,Y,kCAIP,MAAO,K,oCAIP,OAAO,IAAIX,EAAY,GAAI,EAAK,S,KAIlCY,E,iGAEE,MAAO,W,kCAIP,MAAO,K,oCAIP,OAAO,IAAIZ,EAAY,IAAK,EAAK,S,KCvEpBa,E,WAQjB,aAAe,yBAPRC,UAOO,OANPC,WAMO,OALPC,aAKO,OAJPd,SAIO,OAHPC,WAGO,OAFPc,UAEO,EACVV,KAAKO,KAAO,GACZP,KAAKQ,MAAQ,CAAC,IAAIP,GAClBD,KAAKS,QAAU,EACfT,KAAKL,IAAM,EACXK,KAAKJ,MAAQ,EACbI,KAAKU,KAAO,E,6DAIZ,OAAOV,KAAKQ,MAAMG,OAAS,EACrBX,KAAKQ,MAAMI,QACXZ,KAAKO,KAAKM,KAAKC,MAAMD,KAAKE,SAAWf,KAAKO,KAAKI,a,KCVxCK,E,YAWjB,WAAYC,GAAgB,IAAD,uBACvB,4CAAMA,KAVHC,eAAyB,IASL,EARpBC,WAAqB,EAQD,EAPpBC,gBAA0B,GAON,EANpBC,YAAsB,EAMF,EALpBC,aAAuB,GAKH,EAJpBC,SAAmB,EAIC,EAHpBC,YAAsB,EAGF,EAFpBC,QAAkB,EAIrB,IAAMC,EAAI,IAAIpB,EAFS,OAGvB,EAAKqB,MAAQ,CACTC,OAAQF,EACRG,MAAOH,EAAEI,kBALU,E,4EAUvB,IAAIC,EAAI/B,KAAK2B,MAAMC,OAAOE,iBAC1B9B,KAAKgC,SAAS,CACVH,MAAOE,M,+BAKX,IAAME,EAAUjC,KAAK2B,MAAME,MAAMI,UAAUC,KAAI,SAACC,GAC5C,OAAO,4BAAQC,UAAU,cAAcC,IAAKF,EAAEG,UAAWH,EAAEG,aAE/D,OACI,yBAAKF,UAAU,OACX,wBAAIG,GAAG,UAAUvC,KAAK2B,MAAME,MAAMW,UAClC,yBAAKD,GAAG,WAAWN,Q,GAlCFQ,IAAMC,WCDnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmIlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b2294d93.chunk.js","sourcesContent":["export interface IEvent {\n    prompt(): string;\n    imgPath(): string;\n    choices(): IChoice[];\n}\n\nexport interface IChoice {\n    answer(): string;\n    followUps(): IEvent[];\n    statChanges(): StatChanges;\n}\n\nexport class StatChanges {\n    public readonly dfriends: number;\n    public readonly dgpa: number;\n    public readonly dsleep: number;\n\n    constructor(fds: number, gpa: number, sleep: number) {\n        this.dfriends = fds;\n        this.dgpa = gpa;\n        this.dsleep = sleep;\n    }\n}\n","import {IEvent, IChoice, StatChanges} from \"./core\";\n\nexport default class FacultyPicker implements IEvent {\n    prompt(): string {\n        return \"Choose your faculty!\";\n    }\n\n    imgPath(): string {\n        return \"\";\n    }\n\n    choices(): IChoice[] {\n        return [\n            new Arts(),\n            new Engineering(),\n            new Science(),\n            new Sauder()\n        ];\n    }\n\n}\n\nclass Arts implements IChoice {\n    answer(): string {\n        return \"Arts\";\n    }\n\n    followUps(): IEvent[] {\n        return [];\n    }\n\n    statChanges(): StatChanges {\n        return new StatChanges(50, 2.0, 100);\n    }\n}\n\nclass Engineering implements IChoice {\n    answer(): string {\n        return \"Engineering\";\n    }\n\n    followUps(): IEvent[] {\n        return [];\n    }\n\n    statChanges(): StatChanges {\n        return new StatChanges(0, 4.0, 100);\n    }\n}\n\nclass Science implements IChoice {\n    answer(): string {\n        return \"Science\";\n    }\n\n    followUps(): IEvent[] {\n        return [];\n    }\n\n    statChanges(): StatChanges {\n        return new StatChanges(50, 3.0, 100);\n    }\n}\n\nclass Sauder implements IChoice {\n    answer(): string {\n        return \"Sauder\";\n    }\n\n    followUps(): IEvent[] {\n        return [];\n    }\n\n    statChanges(): StatChanges {\n        return new StatChanges(100, 2.0, 100);\n    }\n}\n","import { IEvent }from \"./events/core\";\nimport FacultyPicker from \"./events/FacultyPicker\";\n\nexport default class Player {\n    public pool: IEvent[];\n    public queue: IEvent[];\n    public friends: number;\n    public gpa: number;\n    public sleep: number;\n    public week: number;\n\n    constructor() {\n        this.pool = [];\n        this.queue = [new FacultyPicker()];\n        this.friends = 0;\n        this.gpa = 0;\n        this.sleep = 0;\n        this.week = 0;\n    }\n\n    public getRandomEvent(): IEvent {\n        return this.queue.length > 0 \n            ? this.queue.shift() as IEvent\n            : this.pool[Math.floor(Math.random() * this.pool.length)];\n    }\n}\n","import React from \"react\";\n\nimport {IEvent, IChoice} from \"./events/core\";\nimport Player from \"./Player\";\n\n// // tslint:disable-next-line:no-empty-interface\nexport interface IProps {}\n\nexport interface IState {\n    player: Player;\n    event: IEvent;\n}\n\nexport default class App extends React.Component <IProps, IState> {\n\n    public SAUDER_FRIENDS: number = 100;\n    public SAUDER_GPA: number = 2.0;\n    public SCIENCE_FRIENDS: number = 50;\n    public SCIENCE_GPA: number = 3.0;\n    public ARTS_FRIENDS: number = 50;\n    public ARTS_GPA: number = 2.0;\n    public ENG_FRIENDS: number = 0;\n    public ENG_GPA: number = 4.0;\n\n    constructor(props: IProps) {\n        super(props);\n        const p = new Player();\n        this.state = {\n            player: p,\n            event: p.getRandomEvent(),\n        };\n    }\n\n    getNextEvent() {\n        let e = this.state.player.getRandomEvent();\n        this.setState({ \n            event: e,\n        });\n    }\n\n    render() {\n        const choices = this.state.event.choices().map((c: IChoice) => {\n            return <button className=\"choices-btn\" key={c.answer()}>{c.answer()}</button> ;\n        });\n        return (\n            <div className=\"App\">\n                <h2 id=\"prompt\">{this.state.event.prompt()}</h2>\n                <div id=\"choices\">{choices}</div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\n// import './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nrender(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}